# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Book(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, book_id: int=None, book_name: str=None, book_price: int=None, book_author: str=None, book_publication: str=None, book_status: str=None, complete: bool=False):  # noqa: E501
        """Book - a model defined in Swagger

        :param id: The id of this Book.  # noqa: E501
        :type id: int
        :param book_id: The book_id of this Book.  # noqa: E501
        :type book_id: int
        :param book_name: The book_name of this Book.  # noqa: E501
        :type book_name: str
        :param book_price: The book_price of this Book.  # noqa: E501
        :type book_price: int
        :param book_author: The book_author of this Book.  # noqa: E501
        :type book_author: str
        :param book_publication: The book_publication of this Book.  # noqa: E501
        :type book_publication: str
        :param book_status: The book_status of this Book.  # noqa: E501
        :type book_status: str
        :param complete: The complete of this Book.  # noqa: E501
        :type complete: bool
        """
        self.swagger_types = {
            'id': int,
            'book_id': int,
            'book_name': str,
            'book_price': int,
            'book_author': str,
            'book_publication': str,
            'book_status': str,
            'complete': bool
        }

        self.attribute_map = {
            'id': 'id',
            'book_id': 'bookId',
            'book_name': 'bookName',
            'book_price': 'bookPrice',
            'book_author': 'bookAuthor',
            'book_publication': 'bookPublication',
            'book_status': 'bookStatus',
            'complete': 'complete'
        }

        self._id = id
        self._book_id = book_id
        self._book_name = book_name
        self._book_price = book_price
        self._book_author = book_author
        self._book_publication = book_publication
        self._book_status = book_status
        self._complete = complete

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Book.


        :return: The id of this Book.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Book.


        :param id: The id of this Book.
        :type id: int
        """

        self._id = id

    @property
    def book_id(self) -> int:
        """Gets the book_id of this Book.


        :return: The book_id of this Book.
        :rtype: int
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id: int):
        """Sets the book_id of this Book.


        :param book_id: The book_id of this Book.
        :type book_id: int
        """

        self._book_id = book_id

    @property
    def book_name(self) -> str:
        """Gets the book_name of this Book.


        :return: The book_name of this Book.
        :rtype: str
        """
        return self._book_name

    @book_name.setter
    def book_name(self, book_name: str):
        """Sets the book_name of this Book.


        :param book_name: The book_name of this Book.
        :type book_name: str
        """

        self._book_name = book_name

    @property
    def book_price(self) -> int:
        """Gets the book_price of this Book.


        :return: The book_price of this Book.
        :rtype: int
        """
        return self._book_price

    @book_price.setter
    def book_price(self, book_price: int):
        """Sets the book_price of this Book.


        :param book_price: The book_price of this Book.
        :type book_price: int
        """

        self._book_price = book_price

    @property
    def book_author(self) -> str:
        """Gets the book_author of this Book.


        :return: The book_author of this Book.
        :rtype: str
        """
        return self._book_author

    @book_author.setter
    def book_author(self, book_author: str):
        """Sets the book_author of this Book.


        :param book_author: The book_author of this Book.
        :type book_author: str
        """

        self._book_author = book_author

    @property
    def book_publication(self) -> str:
        """Gets the book_publication of this Book.


        :return: The book_publication of this Book.
        :rtype: str
        """
        return self._book_publication

    @book_publication.setter
    def book_publication(self, book_publication: str):
        """Sets the book_publication of this Book.


        :param book_publication: The book_publication of this Book.
        :type book_publication: str
        """

        self._book_publication = book_publication

    @property
    def book_status(self) -> str:
        """Gets the book_status of this Book.

        Book Status  # noqa: E501

        :return: The book_status of this Book.
        :rtype: str
        """
        return self._book_status

    @book_status.setter
    def book_status(self, book_status: str):
        """Sets the book_status of this Book.

        Book Status  # noqa: E501

        :param book_status: The book_status of this Book.
        :type book_status: str
        """
        allowed_values = ["available", "unavailable", "outofstock"]  # noqa: E501
        if book_status not in allowed_values:
            raise ValueError(
                "Invalid value for `book_status` ({0}), must be one of {1}"
                .format(book_status, allowed_values)
            )

        self._book_status = book_status

    @property
    def complete(self) -> bool:
        """Gets the complete of this Book.


        :return: The complete of this Book.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this Book.


        :param complete: The complete of this Book.
        :type complete: bool
        """

        self._complete = complete
